#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test33/Message.h"
#include "test33/message/Msg1.h"
#include "test33/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test33::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Msg1 = test33::message::Msg1<Interface>;
    using Frame = test33::frame::Frame<Interface>;
};

static_assert(test33::field::Variant1<>::isVersionDependent(), "Invalid assumption");

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x1, 5, 1, 5, 0x1, 0x2, 0x3, 0x4, 0x5, 0xab, 0xcd
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test33::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 1U);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p2().field_value().value(), 0x01);
    TS_ASSERT(msg->field_f1().accessField_p2().field_value2().doesExist());
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p2().field_value2().field().value(), 0x02030405);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test2()
{
    static const std::uint8_t Buf[] = {
        0x1, 2, 1, 2, 0x1, 0x2, 0xab, 0xcd
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test33::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 1U);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p2().field_value().value(), 0x01);
    TS_ASSERT(msg->field_f1().accessField_p2().field_value2().isMissing());
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test3()
{
    Msg1 msg;
    TS_ASSERT_EQUALS(msg.field_f1().getVersion(), 5U);
    auto& f1_p2 = msg.field_f1().initField_p2();
    TS_ASSERT(f1_p2.field_value2().doesExist());
    f1_p2.field_value().value() = 0x1;
    f1_p2.field_value2().field().value() = 0x0a0b0c0d;
    msg.field_f2().value() = 0xabcd;
    TS_ASSERT(!msg.refresh());

    do {
        static const std::uint8_t Buf[] = {
            0x1, 5, 1, 5, 0x1, 0xa, 0xb, 0xc, 0xd, 0xab, 0xcd
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        std::vector<std::uint8_t> outBuf;
        outBuf.resize(frame.length(msg));
        auto writeIter = &outBuf[0];
        auto es = frame.write(msg, writeIter, outBuf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
    } while (false);

    do {
        msg.transportField_version().value() = 2;
        TS_ASSERT(msg.refresh());
        static const std::uint8_t Buf[] = {
            0x1, 2, 1, 1, 0x1, 0xab, 0xcd
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame frame;
        std::vector<std::uint8_t> outBuf;
        outBuf.resize(frame.length(msg));
        auto writeIter = &outBuf[0];
        auto es = frame.write(msg, writeIter, outBuf.size());
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT_EQUALS(outBuf.size(), BufSize);
        TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(Buf)));
    } while (false);

}

