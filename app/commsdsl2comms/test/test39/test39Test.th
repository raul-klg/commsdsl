#include "cxxtest/TestSuite.h"

#include "test39/Message.h"
#include "test39/message/M1.h"
#include "test39/frame/Frame.h"
#include "test39/dispatch/DispatchMessage.h"
#include "comms/process.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();

    class Handler;

    using Interface =
        test39::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::Handler<Handler>
        >;

    using Msg1 = test39::message::M1<Interface>;
    using Frame = test39::frame::Frame<Interface>;

    class Handler
    {
    public:
        void handle(Msg1& msg)
        {
            static_cast<void>(msg);
            m_msg1Received = true;
        }

        void handle(Interface& msg)
        {
            static_cast<void>(msg);
            m_msg1Received = false;
        }

        bool getMsg1Received() const
        {
            return m_msg1Received;
        }

        void reset()
        {
            m_msg1Received = false;
        }

    private:
        bool m_msg1Received = false;
    };
};

void TestSuite::test1()
{
    std::vector<std::uint8_t> outBuf;
    Frame frame;
    Msg1 msg1;
    msg1.field_a1().value() = 5U;
    msg1.field_a2().value() = 3U;
    msg1.field_a3().value() = 3U;
    msg1.field_f3().field_a1().value() = 0xa;
    msg1.field_f3().field_a2().value() = 0xb;
    msg1.field_f3().field_a3().value() = 0xc;
    TS_ASSERT_EQUALS(msg1.field_a4().value(), msg1.field_f3().field_m2().field_m1().value());

    outBuf.resize(frame.length(msg1));
    auto* writeIter = &outBuf[0];
    auto es = frame.write(msg1, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    static const std::uint8_t ExpectedBuf[] = {
        0x0, 0x6, 0x1, 0x5, 0x33, 0xa, 0xb, 0xc
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    TS_ASSERT_EQUALS(outBuf.size(), ExpectedBufSize);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(ExpectedBuf)));

    Handler handler;
    auto comsumed = comms::processAllWithDispatch(&outBuf[0], outBuf.size(), frame, handler);
    TS_ASSERT_EQUALS(comsumed, outBuf.size());
    TS_ASSERT(handler.getMsg1Received()); // Make sure that Msg1 is received
}

void TestSuite::test2()
{
    std::vector<std::uint8_t> outBuf;
    Frame frame;
    Msg1 msg1;
    msg1.field_a1().value() = 5U;
    msg1.field_a2().value() = 3U;
    msg1.field_a3().value() = 3U;
    msg1.field_f3().field_a1().value() = 0xa;
    msg1.field_f3().field_a2().value() = 0xb;
    msg1.field_f3().field_a3().value() = 0xc;
    TS_ASSERT_EQUALS(msg1.field_a4().value(), msg1.field_f3().field_m2().field_m1().value());

    outBuf.resize(frame.length(msg1));
    auto* writeIter = &outBuf[0];
    auto es = frame.write(msg1, writeIter, outBuf.size());
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);

    static const std::uint8_t ExpectedBuf[] = {
        0x0, 0x6, 0x1, 0x5, 0x33, 0xa, 0xb, 0xc
    };
    static const std::size_t ExpectedBufSize = std::extent<decltype(ExpectedBuf)>::value;
    TS_ASSERT_EQUALS(outBuf.size(), ExpectedBufSize);
    TS_ASSERT(std::equal(outBuf.begin(), outBuf.end(), std::begin(ExpectedBuf)));

    Handler handler;
    using Dispatcher = test39::dispatch::MsgDispatcherDefaultOptions;
    auto comsumed = comms::processAllWithDispatchViaDispatcher<Dispatcher>(&outBuf[0], outBuf.size(), frame, handler);
    TS_ASSERT_EQUALS(comsumed, outBuf.size());
    TS_ASSERT(handler.getMsg1Received()); // Make sure that Msg1 is received
}

