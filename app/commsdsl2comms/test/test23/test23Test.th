#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test23/Message.h"
#include "test23/message/Msg1.h"
#include "test23/message/Msg2.h"
#include "test23/message/Msg3.h"
#include "test23/message/Msg4.h"
#include "test23/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();
    void test4();

    using Interface =
        test23::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Msg1 = test23::message::Msg1<Interface>;
    using Msg2 = test23::message::Msg2<Interface>;
    using Msg3 = test23::message::Msg3<Interface>;
    using Msg4 = test23::message::Msg4<Interface>;
    using Frame = test23::frame::Frame<Interface>;
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] =
    {
        1, 3, 5, 1, 'h', 'e', 'l', 'l', 'o', 'b', 'l', 'a'
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_str().value(), "hello");
}

void TestSuite::test2()
{
    do {
        static const std::uint8_t Buf[] =
        {
            2, 3, 5, 1, 'h', 'e', 'l', 'l', 'o', 'b', 'l', 'a'
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M2);
        auto* msg = static_cast<const Msg2*>(msgPtr.get());
        TS_ASSERT(msg->field_str().doesExist());
        TS_ASSERT_EQUALS(msg->field_str().field().value(), "hello");

        msgPtr->version() = 1U;
        TS_ASSERT(msgPtr->refresh());
        TS_ASSERT(msg->field_str().isMissing());

    } while (false);

    do {

        static const std::uint8_t Buf[] =
        {
            2, 1, 5, 1, 'h', 'e', 'l', 'l', 'o', 'b', 'l', 'a'
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M2);
        auto* msg = static_cast<const Msg2*>(msgPtr.get());
        TS_ASSERT(msg->field_str().isMissing());
    } while (false);
}

void TestSuite::test3()
{
    do {
        static const std::uint8_t Buf[] =
        {
            3, 3, 5, 1, 'h', 'e', 'l', 'l', 'o', 'b', 'l', 'a'
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M3);
        auto* msg = static_cast<const Msg3*>(msgPtr.get());
        TS_ASSERT(msg->field_str().doesExist());
        TS_ASSERT_EQUALS(msg->field_str().field().value(), "hello");

        msgPtr->version() = 1U;
        TS_ASSERT(msgPtr->refresh());
        TS_ASSERT(msg->field_str().isMissing());
    } while (false);

    do {

        static const std::uint8_t Buf[] =
        {
            3, 1, 5, 1, 'h', 'e', 'l', 'l', 'o', 'b', 'l', 'a'
        };
        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M3);
        auto* msg = static_cast<const Msg3*>(msgPtr.get());
        TS_ASSERT(msg->field_str().isMissing());
    } while (false);
}

void TestSuite::test4()
{
    do {
        static const std::uint8_t Buf[] =
        {
            4, 3, 3, 3, 0, 1, 2, 3, 4, 5, 2, 6, 7
        };

        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M4);
        auto* msg = static_cast<Msg4*>(msgPtr.get());
        TS_ASSERT(msg->field_b1().field_data2().doesExist());
        TS_ASSERT(msg->field_b1().field_len3().doesExist());
        TS_ASSERT(msg->field_b1().field_data3().doesExist());

        TS_ASSERT_EQUALS(msg->field_b1().field_data1().value().size(), 3U);
        TS_ASSERT_EQUALS(msg->field_b1().field_data2().field().value().size(), 3U);
        TS_ASSERT_EQUALS(msg->field_b1().field_data3().field().value().size(), 2U);

        msg->field_b1().field_data3().field().value().resize(3U);
        TS_ASSERT(msg->refresh());
        TS_ASSERT_EQUALS(msg->field_b1().field_len3().field().value(), 3U);

        msg->version() = 1U;
        TS_ASSERT(msg->refresh());
        TS_ASSERT(msg->field_b1().field_data2().isMissing());
        TS_ASSERT(msg->field_b1().field_len3().isMissing());
        TS_ASSERT(msg->field_b1().field_data3().isMissing());
    } while (false);

    do {
        static const std::uint8_t Buf[] =
        {
            4, 1, 2, 5, 0, 1
        };

        static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

        Frame::MsgPtr msgPtr;
        Frame frame;

        auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
        auto es = frame.read(msgPtr, readIter, BufSize);
        TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
        TS_ASSERT(msgPtr);
        TS_ASSERT_EQUALS(msgPtr->getId(), test23::MsgId_M4);
        auto* msg = static_cast<Msg4*>(msgPtr.get());
        TS_ASSERT(msg->field_b1().field_data2().isMissing());
        TS_ASSERT(msg->field_b1().field_len3().isMissing());
        TS_ASSERT(msg->field_b1().field_data3().isMissing());

        TS_ASSERT_EQUALS(msg->field_b1().field_data1().value().size(), 2U);
        TS_ASSERT_EQUALS(msg->field_b1().field_len2().value(), 5U);

        msg->version() = 2U;
        TS_ASSERT(msg->refresh());
        TS_ASSERT(msg->field_b1().field_data2().doesExist());
        TS_ASSERT(msg->field_b1().field_len3().doesExist());
        TS_ASSERT(msg->field_b1().field_data3().doesExist());
        TS_ASSERT_EQUALS(msg->field_b1().field_len2().value(), 0U);
    } while (false);
    
}
