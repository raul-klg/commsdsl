#include "cxxtest/TestSuite.h"

#include "test34/Message.h"
#include "test34/message/Msg1_1.h"
#include "test34/message/Msg1_2.h"
#include "test34/message/Msg2.h"
#include "test34/frame/Frame.h"
#include "test34/dispatch/DispatchMessage.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
//    void test2();
//    void test3();

    struct Interface : public
        test34::Message<>
    {
        virtual ~Interface() {}
    };

    using Msg1_1 = test34::message::Msg1_1<Interface>;
    using Msg1_2 = test34::message::Msg1_2<Interface>;
    using Msg2 = test34::message::Msg2<Interface>;
    using Frame = test34::frame::Frame<Interface>;

    static_assert(
        std::is_base_of<Interface, typename Frame::MsgPtr::element_type>::value,
        "Unexpected interface");

    class Handler
    {
    public:
        void handle(const Msg1_1&)
        {
            ++m_msg1_1;
        }

        void handle(const Msg1_2&)
        {
            ++m_msg1_2;
        }

        void handle(const Msg2&)
        {
            ++m_msg2;
        }

        void handle(const Interface&)
        {
            ++m_unknown;
        }

        unsigned m_msg1_1 = 0U;
        unsigned m_msg1_2 = 0U;
        unsigned m_msg2 = 0U;
        unsigned m_unknown = 0U;
    };
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] = {
        0x1, 0, 0x1, 0x2, 0x3, 0x4
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    Frame::AllFields allFields;

    auto readIter = &Buf[0];
    auto es = frame.readFieldsCached(allFields, msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    auto id = frame.layer_id().accessCachedField(allFields).value();
    TS_ASSERT_EQUALS(id, test34::MsgId_M1);
    auto* msg = static_cast<const Msg1_1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().value(), 0x01020304);

    Handler handler;
    test34::dispatch::dispatchMessageDefaultOptions(id, 0, *msgPtr, handler);
    TS_ASSERT_EQUALS(handler.m_msg1_1, 1U);
}

