#include "cxxtest/TestSuite.h"

#include "comms/process.h"
#include "test35/Message.h"
#include "test35/message/Msg1.h"
#include "test35/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();

    using Interface =
        test35::Message<>;

    using Msg1 = test35::message::Msg1<Interface>;
    using Msg2 = test35::message::Msg2<Interface>;
    using Frame = test35::frame::Frame<Interface>;
};

void TestSuite::test1()
{
    static const std::uint8_t Buf1[] = {
        0x1, 2, 0x2, 0x5
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    class Handler
    {
    public:
        explicit Handler(Frame& f) : m_frame(f) {}

        void handle(Msg1& msg)
        {
            m_frame.layer_version().pseudoField().value() = msg.field_version().value();
        }

        void handle(Msg2& msg)
        {
            m_msg2HasField = msg.field_f1().doesExist();
        }

        void handle(Interface&) {}

        bool getMsg2HasField() const
        {
            return m_msg2HasField;
        }

    private:
        Frame& m_frame;
        bool m_msg2HasField = false;
    };

    Frame frame;
    Handler handler(frame);
    auto comsumed = comms::processAllWithDispatch(&Buf1[0], Buf1Size, frame, handler);
    TS_ASSERT_EQUALS(comsumed, Buf1Size);
    TS_ASSERT(handler.getMsg2HasField());


    static const std::uint8_t Buf2[] = {
        0x1, 1, 0x2
    };
    static const std::size_t Buf2Size = std::extent<decltype(Buf2)>::value;
    comsumed = comms::processAllWithDispatch(&Buf2[0], Buf2Size, frame, handler);
    TS_ASSERT_EQUALS(comsumed, Buf2Size);
    TS_ASSERT(!handler.getMsg2HasField());
}

