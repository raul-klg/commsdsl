#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test32/Message.h"
#include "test32/message/Msg1.h"
#include "test32/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test32::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Msg1 = test32::message::Msg1<Interface>;
    using Frame = test32::frame::Frame<Interface>;

    class TypeVerifier
    {
    public:
        TypeVerifier(std::uint8_t type) : m_type(type) {}

        template <std::size_t TIdx, typename TField>
        void operator()(TField& field)
        {
            TS_ASSERT(field.field_type().value() == m_type);
        }

    private:
        std::uint8_t m_type = 0U;
    };
};

void TestSuite::test1()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 0, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 0U);
    msg->field_f1().currFieldExec(TypeVerifier(0));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p1().field_value().value(), 0x01020304);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}

void TestSuite::test2()
{
    static const std::uint8_t Buf1[] =
    {
        1, 1, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 1U);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_p2().field_value().value(), 0x01);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);

    auto* nonConstMsg = const_cast<Msg1*>(msg);
    nonConstMsg->field_f1().currFieldExec(TypeVerifier(1));
}

void TestSuite::test3()
{
    static const std::uint8_t Buf1[] =
    {
        1, 5, 0x4, 0x1, 0x2, 0x3, 0x4, 0xab, 0xcd
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test32::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_f1().currentField(), 2U);
    msg->field_f1().currFieldExec(TypeVerifier(5));
    TS_ASSERT_EQUALS(msg->field_f1().accessField_any().field_type().value(), 0x05);
    TS_ASSERT_EQUALS(msg->field_f1().accessField_any().field_length().value(), 0x04);
    TS_ASSERT_EQUALS(msg->field_f2().value(), 0xabcd);
}
