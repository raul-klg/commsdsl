#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test26/Message.h"
#include "test26/message/Msg1_v1.h"
#include "test26/message/Msg1_v2.h"
#include "test26/message/Msg1_v3.h"
#include "test26/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();

    using Interface =
        test26::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    using Msg1_v1 = test26::message::Msg1_v1<Interface>;
    using Msg1_v2 = test26::message::Msg1_v2<Interface>;
    using Msg1_v3 = test26::message::Msg1_v3<Interface>;
    using Frame = test26::frame::Frame<Interface>;
};

void TestSuite::test1()
{
    static const std::uint8_t Buf[] =
    {
        1, 3
    };
    static const std::size_t BufSize = std::extent<decltype(Buf)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf[0]);
    auto es = frame.read(msgPtr, readIter, BufSize);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test26::MsgId_M1);
    auto* msg1 = dynamic_cast<const Msg1_v1*>(msgPtr.get());
    TS_ASSERT(msg1 == nullptr);
    auto msg2 = dynamic_cast<const Msg1_v2*>(msgPtr.get());
    TS_ASSERT(msg2 == nullptr);
    auto msg3 = dynamic_cast<const Msg1_v3*>(msgPtr.get());
    TS_ASSERT(msg3 != nullptr);
    TS_ASSERT_EQUALS(msg3->field_version().value(), 3U);
}
